from OpenGL.GL import *
from OpenGL.GLU import *
from OpenGL.GLUT import *
from math import *
from time import *


def init():
    glClearColor(0, 0, 0, 1)
    gluOrtho2D(-300, 300, -300, 300)


x = 50.0
y = 75.0
direc = 1


def draw():
    global x, y
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
    glColor3f(1, 0, 0)
    glLineWidth(2)
    glBegin(GL_LINES)
    glVertex2f(x, 30)
    glVertex2f(50, 130)
    glVertex2f(x, 130)
    glVertex2f(25, 80)
    glVertex2f(x, 130)
    glVertex2f(75, y + 5)
    # house
    glVertex2f(x + 25, 75 + 5)
    glVertex2f(x + 25, 75 + 55)
    glVertex2f(x + 25, 75 + 55)
    glVertex2f(x + 75, 75 + 55)
    glVertex2f(x + 75, 75 + 55)
    glVertex2f(x + 75, 75 + 5)
    glVertex2f(x + 75, 75 + 5)
    glVertex2f(x + 25, 75 + 5)
    glVertex2f(x + 75, 75 + 55)
    glVertex2f(x + 25, 75 + 55)
    glVertex2f(x + 24, 75 + 55)
    glVertex2f(x + 50, 75 + 85)
    glVertex2f(x + 50, 75 + 85)
    glVertex2f(x + 76, 75 + 55)
    glEnd()
    glFlush()
    # brush
    glBegin(GL_POLYGON)
    glVertex2f(x + 25, 75 + 5)
    glVertex2f(x + 35, 75 + 5)
    glVertex2f(x + 35, y + 15)
    glVertex2f(x + 25, y + 15)
    glEnd()
    glFlush()
    glBegin(GL_TRIANGLE_FAN)
    for i in range(0, 360):
        glVertex2f(50 + 20 * cos(pi * i / 180), 150 + 20 * sin(pi * i / 180))
    glEnd()
    glFlush()


def animate(temp):
    global x, y, direc
    y += 0.1 * direc
    if y > 115.0 or y < 75.0:
        direc *= -1  # Change direction when reaching the top or bottom

    glutPostRedisplay()
    glutTimerFunc(16, animate, 0)


def main():
    glutInit(sys.argv)
    glutInitDisplayMode(GLUT_RGBA)
    glutInitWindowSize(800, 800)
    glutInitWindowPosition(0, 0)
    glutCreateWindow("ANIMATION")
    glutDisplayFunc(draw)
    glutTimerFunc(0, animate, 0)
    init()
    glutMainLoop()


main()
